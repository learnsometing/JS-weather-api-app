{"version":3,"sources":["weatherTable/weatherTable.module.css","searchForm/searchForm.module.css","searchForm/searchForm.js","util/getCurrentForecast.js","util/request.js","weatherTable/weatherTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","UnitButtons","onClick","activeBtn","metricStyle","SearchFormStyles","inactiveBtn","imperialStyle","className","unitBtns","type","bind","PureSearchForm","props","useState","city","setCity","selectedUnit","setSelectedUnit","formContainer","onSubmit","event","request","fetch","then","response","ok","Error","json","getCurrentForecast","Request","process","method","mode","setCF","err","alert","console","error","preventDefault","form","value","onChange","target","placeholder","textInput","buttonGroup","btnInput","content","currentForecast","coord","weather","main","base","wind","visibility","sys","clouds","dt","name","timezone","id","country","cod","temp","feelsLike","feels_like","description","windSpeed","speed","presure","pressure","humidity","sunrise","Date","toLocaleTimeString","sunset","lat","lon","now","WeatherTableStyles","container","tempContainer","tempSpan","descriptionContainer","currentDate","toLocaleDateString","odd","App","setCurrentForecast","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,UAAY,gCAAgC,cAAgB,oCAAoC,qBAAuB,2CAA2C,SAAW,+BAA+B,YAAc,kCAAkC,YAAc,kCAAkC,IAAM,4B,gBCApUD,EAAOC,QAAU,CAAC,SAAW,6BAA6B,UAAY,8BAA8B,YAAc,gCAAgC,cAAgB,kCAAkC,KAAO,yBAAyB,UAAY,8BAA8B,YAAc,gCAAgC,SAAW,+B,4LCM1TC,EAAc,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UACjCC,EAAcC,IAAiBC,YAC/BC,EAAgBF,IAAiBF,UAOrC,MALkB,WAAdA,IACFC,EAAcC,IAAiBF,UAC/BI,EAAgBF,IAAiBC,aAIjC,yBAAKE,UAAWH,IAAiBI,UAC/B,4BACEC,KAAK,SACLR,QAASA,EAAQS,KAAK,KAAM,UAC5BH,UAAWJ,GAHb,SAOA,4BACEM,KAAK,SACLR,QAASA,EAAQS,KAAK,KAAM,YAC5BH,UAAWD,GAHb,WAWOK,EAAiB,SAACC,GAAW,IAAD,EACfC,mBAAS,IADM,mBAChCC,EADgC,KAC1BC,EAD0B,OAECF,mBAAS,YAFV,mBAEhCG,EAFgC,KAElBC,EAFkB,KAqBvC,OACE,yBAAKV,UAAWH,IAAiBc,eAC/B,0BAAMC,SAfW,SAACC,IC5CT,SAACC,GACd,OAAOC,MAAMD,GAASE,MAAK,SAAAC,GACzB,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,sBAElB,OAAOF,EAASG,WDyChBC,CE9CW,SAACd,EAAME,GAMpB,OAAO,IAAIa,QAAJ,4DACgDf,EADhD,kBAC8DE,EAD9D,kBALSc,oCACA,CACdC,OAAQ,MACRC,KAAM,SFyCMX,CAAQP,EAAME,IACFO,MACtB,SAAAI,GAAI,OAAIf,EAAMqB,MAAMN,MACpB,SAAAO,GACEC,MAAM,qDACNC,QAAQC,MAAMH,GACdtB,EAAMqB,MAAM,SAGhBb,EAAMkB,kBAK0B/B,UAAWH,IAAiBmC,MACxD,2BACE9B,KAAK,OACL+B,MAAO1B,EACP2B,SAvBa,SAACrB,GACpBL,EAAQK,EAAMsB,OAAOF,QAuBfG,YAAY,gBACZpC,UAAWH,IAAiBwC,YAC9B,yBAAKrC,UAAWH,IAAiByC,aAC/B,kBAAC,EAAD,CAAa5C,QAASgB,EAAiBf,UAAWc,IAClD,2BACEP,KAAK,SACL+B,MAAM,SACNjC,UAAWH,IAAiB0C,eASzB,WAAClC,GAAD,OACb,kBAAC,EAAD,CAAgBqB,MAAOrB,EAAMqB,S,uBG7EhB,WAACrB,GACd,IAAImC,EAAU,KACd,GAAInC,EAAMoC,gBAAiB,CAAC,IAAD,EAgBrBpC,EAAMoC,gBAdRC,EAFuB,EAEvBA,MACAC,EAHuB,EAGvBA,QAEAC,GALuB,EAIvBC,KAJuB,EAKvBD,MAEAE,GAPuB,EAMvBC,WANuB,EAOvBD,MAGAE,GAVuB,EAQvBC,OARuB,EASvBC,GATuB,EAUvBF,KAGAG,GAbuB,EAWvBC,SAXuB,EAYvBC,GAZuB,EAavBF,MAKIG,GAlBmB,EAcvBC,IAduB,sHAkBTP,EAAIM,SACdE,EAAOZ,EAAKY,KACZC,EAAYb,EAAKc,WACjBC,EAAchB,EAAQ,GAAGgB,YACzBC,EAAYd,EAAKe,MACjBC,EAAUlB,EAAKmB,SACfC,EAAWpB,EAAKoB,SAChBC,EAAU,IAAIC,KAAmB,IAAdlB,EAAIiB,SAAgBE,qBACvCC,EAAS,IAAIF,KAAkB,IAAblB,EAAIoB,QAAeD,qBACrCE,EAAM3B,EAAM2B,IACZC,EAAM5B,EAAM4B,IACZC,EAAM,IAAIL,KAAKA,KAAKK,OAE1B/B,EACE,yBAAKxC,UAAWwE,IAAmBC,WACjC,2CAAiBtB,EAAjB,KAAyBG,GACzB,yBAAKtD,UAAWwE,IAAmBE,eACjC,0BAAM1E,UAAWwE,IAAmBG,UAClC,gCAASnB,EAAT,SADF,eAC4C,oCAAUC,EAAV,UAE9C,yBAAKzD,UAAWwE,IAAmBI,sBACjC,0BAAM5E,UAAWwE,IAAmBb,aAAcA,GAClD,0BAAM3D,UAAWwE,IAAmBK,aAAcN,EAAIJ,qBAAtD,KAA8EI,EAAIO,uBAEpF,+BACE,+BACE,4BACE,wBAAI9E,UAAWwE,IAAmBO,KAAlC,QACA,wBAAI/E,UAAWwE,IAAmBO,KAAMnB,EAAxC,SAEF,4BACE,wCACA,4BAAKE,EAAL,SAEF,4BACE,wBAAI9D,UAAWwE,IAAmBO,KAAlC,SACA,wBAAI/E,UAAWwE,IAAmBO,KAAMf,EAAxC,OAEF,4BACE,uCACA,4BAAKC,IAEP,4BACE,wBAAIjE,UAAWwE,IAAmBO,KAAlC,UACA,wBAAI/E,UAAWwE,IAAmBO,KAAMX,IAE1C,4BACE,sCACA,gCAAMC,EAAN,KAAaC,EAAb,SAQZ,OAAO9B,GCtDMwC,MArBf,WAAgB,IAAD,EACiC1E,mBAAS,MAD1C,mBACNmC,EADM,KACWwC,EADX,KAGb,OACE,yBAAKjF,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,oBAAf,YAIF,8BACE,yBAAKA,UAAU,kBACb,gDACA,kBAAC,EAAD,CAAY0B,MAAOuD,IACnB,kBAAC,EAAD,CAAcxC,gBAAiBA,QCPrByC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7E,MAAK,SAAA8E,GACjCA,EAAaC,kB","file":"static/js/main.5f27b9ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"weatherTable_container__2BpQA\",\"tempContainer\":\"weatherTable_tempContainer__3gyGW\",\"descriptionContainer\":\"weatherTable_descriptionContainer__1irTM\",\"tempSpan\":\"weatherTable_tempSpan__2ab4T\",\"description\":\"weatherTable_description__2nVAl\",\"currentDate\":\"weatherTable_currentDate__1Tc2I\",\"odd\":\"weatherTable_odd__5zSPq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"unitBtns\":\"searchForm_unitBtns__1mRDm\",\"activeBtn\":\"searchForm_activeBtn__2j842\",\"inactiveBtn\":\"searchForm_inactiveBtn__1cjYq\",\"formContainer\":\"searchForm_formContainer__1rHE6\",\"form\":\"searchForm_form__3IFtl\",\"textInput\":\"searchForm_textInput__1gu1e\",\"buttonGroup\":\"searchForm_buttonGroup__vLPBx\",\"btnInput\":\"searchForm_btnInput__16c9Z\"};","import React, { useState } from \"react\";\n\nimport getCurrentForecast from \"../util/getCurrentForecast\";\nimport request from \"../util/request\";\n\nimport SearchFormStyles from \"./searchForm.module.css\"\n\nexport const UnitButtons = ({ onClick, activeBtn }) => {\n  let metricStyle = SearchFormStyles.inactiveBtn;\n  let imperialStyle = SearchFormStyles.activeBtn;\n\n  if (activeBtn === 'metric') {\n    metricStyle = SearchFormStyles.activeBtn;\n    imperialStyle = SearchFormStyles.inactiveBtn;\n  }\n\n  return (\n    <div className={SearchFormStyles.unitBtns}>\n      <button\n        type=\"button\"\n        onClick={onClick.bind(null, 'metric')}\n        className={metricStyle}\n      >\n        &#176;C\n     </button>\n      <button\n        type=\"button\"\n        onClick={onClick.bind(null, 'imperial')}\n        className={imperialStyle}\n      >\n        &#176;F\n      </button>\n    </div>\n  );\n};\n\nexport const PureSearchForm = (props) => {\n  const [city, setCity] = useState('');\n  const [selectedUnit, setSelectedUnit] = useState('imperial');\n\n  const handleChange = (event) => {\n    setCity(event.target.value);\n  }\n\n  const handleSubmit = (event) => {\n    const req = request(city, selectedUnit);\n    getCurrentForecast(req).then(\n      json => props.setCF(json),\n      err => {\n        alert('Please enter a city, followed by its country code');\n        console.error(err)\n        props.setCF(null);\n      }\n    );\n    event.preventDefault();\n  }\n\n  return (\n    <div className={SearchFormStyles.formContainer}>\n      <form onSubmit={handleSubmit} className={SearchFormStyles.form}>\n        <input\n          type=\"text\"\n          value={city}\n          onChange={handleChange}\n          placeholder=\"City, Country\"\n          className={SearchFormStyles.textInput} />\n        <div className={SearchFormStyles.buttonGroup}>\n          <UnitButtons onClick={setSelectedUnit} activeBtn={selectedUnit} />\n          <input\n            type=\"submit\"\n            value=\"Search\"\n            className={SearchFormStyles.btnInput}\n          />\n        </div>\n\n      </form>\n    </div>\n  );\n}\n\nexport default (props) => (\n  <PureSearchForm setCF={props.setCF} />\n);","export default (request) => {\n  return fetch(request).then(response => {\n    if (!response.ok) {\n      throw new Error('Nothing to geocode');\n    }\n    return response.json();\n  })\n}","export default (city, selectedUnit) => {\n  const API_KEY = process.env.REACT_APP_OPEN_WEATHER_MAP_API_KEY;\n  const options = {\n    method: 'GET',\n    mode: 'cors'\n  };\n  return new Request(\n    `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=${selectedUnit}&appid=${API_KEY}`,\n    options\n  );\n}\n","import React from \"react\";\n\nimport WeatherTableStyles from \"../weatherTable/weatherTable.module.css\";\n\nexport default (props) => {\n  let content = null;\n  if (props.currentForecast) {\n    const {\n      coord,\n      weather,\n      base,\n      main,\n      visibility,\n      wind,\n      clouds,\n      dt,\n      sys,\n      timezone,\n      id,\n      name,\n      cod,\n      ...rest\n    } = props.currentForecast;\n\n    const country = sys.country;\n    const temp = main.temp;\n    const feelsLike = main.feels_like;\n    const description = weather[0].description;\n    const windSpeed = wind.speed;\n    const presure = main.pressure;\n    const humidity = main.humidity;\n    const sunrise = new Date(sys.sunrise * 1000).toLocaleTimeString();\n    const sunset = new Date(sys.sunset * 1000).toLocaleTimeString();\n    const lat = coord.lat;\n    const lon = coord.lon;\n    const now = new Date(Date.now());\n\n    content =\n      <div className={WeatherTableStyles.container}>\n        <h2>Weather for {name}, {country}</h2>\n        <div className={WeatherTableStyles.tempContainer}>\n          <span className={WeatherTableStyles.tempSpan}>\n            <strong>{temp}&#176; </strong> feels like <strong> {feelsLike}&#176;</strong></span>\n        </div>\n        <div className={WeatherTableStyles.descriptionContainer}>\n          <span className={WeatherTableStyles.description}>{description}</span>\n          <span className={WeatherTableStyles.currentDate}>{now.toLocaleTimeString()}, {now.toLocaleDateString()}</span>\n        </div>\n        <table>\n          <tbody>\n            <tr>\n              <th className={WeatherTableStyles.odd}>Wind</th>\n              <td className={WeatherTableStyles.odd}>{windSpeed} m/h</td>\n            </tr>\n            <tr>\n              <th>Pressure</th>\n              <td>{presure} hpa</td>\n            </tr>\n            <tr>\n              <th className={WeatherTableStyles.odd}>Humid</th>\n              <td className={WeatherTableStyles.odd}>{humidity} %</td>\n            </tr>\n            <tr>\n              <th>Sunrise</th>\n              <td>{sunrise}</td>\n            </tr>\n            <tr>\n              <th className={WeatherTableStyles.odd}>Sunset</th>\n              <td className={WeatherTableStyles.odd}>{sunset}</td>\n            </tr>\n            <tr>\n              <th>Coords</th>\n              <td>[{lat}, {lon}]</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n  }\n\n\n  return content;\n}","import React, { useState } from 'react';\nimport './App.css';\nimport SearchForm from \"./searchForm/searchForm\";\nimport WeatherTable from \"./weatherTable/weatherTable\";\n\nfunction App() {\n  const [currentForecast, setCurrentForecast] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"header-container\">\n          Weather\n        </div>\n      </header>\n      <main>\n        <div className=\"main-container\">\n          <h1>Weather Forecast</h1>\n          <SearchForm setCF={setCurrentForecast} />\n          <WeatherTable currentForecast={currentForecast} />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}